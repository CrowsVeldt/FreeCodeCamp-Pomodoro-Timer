Note: All this has to be postponed due to delays getting internet access. I'm going to start working anyway, so as not to waste time.

#Overview:

##Prep Schedule:

  Get Internet hooked up: ?

  Set up Trello: 1-2 hours

  Do the Jest course: 7 hours(?)

##Project Schedule:

  My target is to finish it in one month (30 days), this is my deadline.
  
  30 hours, estimated time to complete from FCC.

  Say, 40 hours. That's 1.3 hours per day, if I work every day; 1.8 hours, if I only work weekdays; and 5 hours per day, if I only work week*ends*. I think that's doable. Of course the estimate is probably off, but that's just part of the learning process.

  I'll keep track of how much time I actually manage to do. If I'm likely to miss the deadline, I'll either cut functionality or push the deadline.  

  I intend to make it a Chrome extension, and possibly port it to other browsers afterwards. I'm going to milk every possible bit of education out of these projects.

#Tools and worflow:

##1. Use Trello for planning/management. 

  1a. Write tasks as they occur to you. Give them a one sentance descriptions, if the sentance is too long or complex it's a sign that that item needs to be broken into two or more tasks.

  1b. Give each task an estimated time to complete, try to keep tasks to things that can be completed in 15 minutes, 30 at the most. Keep time of the time it takes to complete a task, and when you finish note the actual time next to the estimated time.
  
  1c. When you take on a task, make a Git issue for it. Update the issue as needed as you continue working on the task, and close it when you finish. Whether that means you successfully completed the task, or you decided it needs to be split/delayed/abandoned.
  
##2. Use Jest for testing

  2a. Download Jest and it's dependencies. Run through the tutorial by Kent C. Dodds. See if you can finish it in one day but don't kill yourself, do it at your own pace.
  
  2b. When you are adding functionality to the application: First, think of what exactly it should do. Second, Think of how you can test that it is doing what it should. Write down pseudo-code for the function, then write a failing test for the function, make the test pass with the simplest code possible, and finally refactor the code to make it fully functional. Make sure to run the test suite regularly to make sure you haven't broken anything.
  
  2c. Note in the README that you are using this app as an opportunity to learn how to write and use unit tests.
  
##3. Workflow

  3a. Pick a task from the Trello board
  
  3b. Start a timer
  
  3c. Add a Git issue to track progress, update it as you complete each following step
  
  3d. Think about the task: What end functionality is required? How can you achieve that? How can you test it? This is the time to do any Googling necessary, try to get to where you won't need to interrupt the following steps for anything (You may not succeed, but try).
  
  3e. Write pseudo-code of your intended function (or class, object, whatever it is)
  
  3f. Write a failing test for your code
  
  3g. Write the code to make the test pass
  
  3h. Once the test passes, refactor the code to be fully functional, run tests.
  
  3i. Run standard --fix (stanfix), run tests again
  
  3j. Write a good, descriptive commit message. Push to Github
  
  3k. Close Git issue
  
  3l. Stop timer, update Trello card with the actual completion time. Mark as finished. Make notes as appropriate: Things that were easier/harder than expected, things you learned, things you realized.
  
  3m. Take a short (~5 minutes) break, you deserve it. Get up, stretch your legs. Eat some nuts. Do something fun.
  
  3n. Repeat as needed